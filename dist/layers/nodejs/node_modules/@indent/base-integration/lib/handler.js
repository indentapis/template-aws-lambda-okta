"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRequest = void 0;
var webhook_1 = require("@indent/webhook");
var _1 = require(".");
function handleRequest(req) {
    var integrations = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        integrations[_i - 1] = arguments[_i];
    }
    return __awaiter(this, void 0, void 0, function () {
        var body, secret, headers, verifyErr_1, status_1, data_1, callName_1, status_2, matchedIntegrations, status_3, results, _a, _b, status_4, rest, err_1, status_5;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 6, , 7]);
                    body = req.body, secret = req.secret, headers = req.headers;
                    console.log('@indent/base-integration: handleRequest: [REQ]');
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, (0, webhook_1.verify)({
                            body: body,
                            secret: secret,
                            headers: headers,
                        })];
                case 2:
                    _c.sent();
                    return [3 /*break*/, 4];
                case 3:
                    verifyErr_1 = _c.sent();
                    status_1 = {
                        code: 9,
                        message: 'webhook failed: invalid signature - check webhook secret',
                        details: [
                            {
                                '@type': 'type.googleapis.com/google.rpc.DebugInfo',
                                detail: verifyErr_1.toString(),
                            },
                        ],
                    };
                    console.error(status_1);
                    return [2 /*return*/, {
                            status: status_1,
                            response: toResponse(status_1),
                        }];
                case 4:
                    data_1 = JSON.parse(body);
                    callName_1 = getWebhookCallName(data_1);
                    console.log('@indent/base-integration: handleRequest: [REQ] webhookType: ' + callName_1);
                    if (callName_1 === 'GetInfo') {
                        status_2 = {
                            details: [
                                {
                                    '@type': 'type.googleapis.com/google.rpc.DebugInfo',
                                    detail: JSON.stringify({
                                        integrations: integrations.map(function (ign) { return ign.GetInfo(); }),
                                    }),
                                },
                            ],
                        };
                        return [2 /*return*/, {
                                status: status_2,
                                response: toResponse(status_2),
                            }];
                    }
                    matchedIntegrations = integrations.filter(function (ign) {
                        var info = ign.GetInfo();
                        if (!info.capabilities.includes(callName_1)) {
                            return false;
                        }
                        else if (integrations.length === 1) {
                            return true;
                        }
                        else if (callName_1 === 'ApplyUpdate') {
                            return ign.MatchApply(data_1);
                        }
                        else if (callName_1 === 'PullUpdate') {
                            return ign.MatchPull(data_1);
                        }
                        else if (callName_1 === 'GetDecision' || callName_1 === 'Decision') {
                            return ign.MatchDecision(data_1);
                        }
                        return true;
                    });
                    console.log('@indent/base-integration: handleRequest: [REQ] integrations');
                    console.log({ integrations: integrations, matchedIntegrations: matchedIntegrations });
                    if (matchedIntegrations.length === 0) {
                        status_3 = {
                            code: _1.StatusCode.NOT_FOUND,
                            message: 'webhook failed: no matched integrations',
                            details: [
                                {
                                    '@type': 'type.googleapis.com/google.rpc.DebugInfo',
                                    detail: JSON.stringify({
                                        callName: callName_1,
                                        matchedIntegrations: matchedIntegrations,
                                        integrations: integrations.map(function (ign) { return ign.GetInfo(); }),
                                    }),
                                },
                            ],
                        };
                        return [2 /*return*/, {
                                status: status_3,
                                response: toResponse(status_3),
                            }];
                    }
                    return [4 /*yield*/, Promise.all(matchedIntegrations.map(function (ign) {
                            switch (callName_1) {
                                case 'ApplyUpdate':
                                    return ign.ApplyUpdate(data_1);
                                case 'PullUpdate':
                                    return ign.PullUpdate(data_1);
                                case 'Decision':
                                case 'GetDecision':
                                    return ign.GetDecision(data_1);
                                default:
                                    return Promise.reject();
                            }
                        }))];
                case 5:
                    results = _c.sent();
                    if (results.length > 0) {
                        // TODO: Figure something out for multiple results
                    }
                    _a = results[0], _b = _a.status, status_4 = _b === void 0 ? {} : _b, rest = __rest(_a, ["status"]);
                    console.log("@indent/base-integration: handleRequest: [RES] { code: ".concat(status_4.code, " }"));
                    if (status_4.details) {
                        console.log("@indent/base-integration: handleRequest: [RES] \u2014 { details: ".concat(JSON.stringify(status_4.details), " }"));
                    }
                    return [2 /*return*/, {
                            status: status_4,
                            response: toResponse(status_4, rest),
                        }];
                case 6:
                    err_1 = _c.sent();
                    // TODO: handle error
                    console.error('@indent/base-integration: handleRequest: [ERR]');
                    console.error(err_1);
                    status_5 = {
                        code: 10,
                        message: 'Uncaught exception',
                        details: [
                            {
                                '@type': 'type.googleapis.com/google.rpc.DebugInfo',
                                detail: err_1.toString(),
                            },
                        ],
                    };
                    return [2 /*return*/, {
                            status: status_5,
                            response: toResponse(status_5),
                        }];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.handleRequest = handleRequest;
function getWebhookCallName(data) {
    if (data.kinds) {
        return 'PullUpdate';
    }
    if (data.info) {
        return 'GetInfo';
    }
    if (data.events) {
        var eventList = data.events.map(function (e) { return e.event; });
        // Check if there is a grant or revoke event
        // that means it's an ApplyUpdate request
        if (eventList.includes('access/grant') ||
            eventList.includes('access/revoke')) {
            return 'ApplyUpdate';
        }
        return 'GetDecision';
    }
    // TODO: log unrecognized webhook call type
    return 'Unrecognized';
}
function toResponse(status, rest) {
    return {
        statusCode: !status.code ? 200 : 500,
        body: JSON.stringify(__assign({ status: status }, (rest || {}))),
        headers: { 'Content-Type': 'application/json' },
    };
}
//# sourceMappingURL=handler.js.map