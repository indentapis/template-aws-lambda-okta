"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getToken = void 0;
var axios_1 = __importDefault(require("axios"));
var njwt_1 = require("njwt");
// Required for all authentication
var OKTA_DOMAIN = process.env.OKTA_DOMAIN || '';
// Service account-based authentication
var OKTA_TOKEN = process.env.OKTA_TOKEN || '';
// App-based auOktaGroupthentication
var OKTA_CLIENT_ID = process.env.OKTA_CLIENT_ID || '';
var OKTA_PRIVATE_KEY = process.env.OKTA_PRIVATE_KEY || '';
function getToken() {
    return __awaiter(this, void 0, void 0, function () {
        var signingToken, token;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (OKTA_TOKEN) {
                        return [2 /*return*/, {
                                Authorization: "SSWS ".concat(OKTA_TOKEN),
                                token: OKTA_TOKEN,
                            }];
                    }
                    else if (!OKTA_PRIVATE_KEY) {
                        throw new Error('utils/okta-auth: missing env var: OKTA_PRIVATE_KEY');
                    }
                    return [4 /*yield*/, getOktaSigningToken()];
                case 1:
                    signingToken = _a.sent();
                    return [4 /*yield*/, getOktaAccessToken(signingToken)];
                case 2:
                    token = _a.sent();
                    return [2 /*return*/, {
                            Authorization: "Bearer ".concat(token),
                            token: token,
                        }];
            }
        });
    });
}
exports.getToken = getToken;
function getOktaSigningToken() {
    return __awaiter(this, void 0, void 0, function () {
        var claims, signingKey, jwt;
        return __generator(this, function (_a) {
            claims = {
                iss: "".concat(OKTA_CLIENT_ID),
                sub: "".concat(OKTA_CLIENT_ID),
                aud: "https://".concat(OKTA_DOMAIN, "/oauth2/v1/token"),
            };
            signingKey = OKTA_PRIVATE_KEY.toString();
            jwt = (0, njwt_1.create)(claims, signingKey, 'RS256');
            return [2 /*return*/, jwt.compact()];
        });
    });
}
function getOktaAccessToken(signingToken) {
    return __awaiter(this, void 0, void 0, function () {
        var urlParams, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    urlParams = new URLSearchParams({
                        grant_type: 'client_credentials',
                        scope: 'okta.groups.manage',
                        client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',
                        client_assertion: "".concat(signingToken), // bearer token
                    });
                    return [4 /*yield*/, (0, axios_1.default)({
                            url: "https://".concat(OKTA_DOMAIN, "/oauth2/v1/token"),
                            method: 'post',
                            headers: {
                                Accept: 'application/json',
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            data: urlParams,
                        }).then(function (r) { return r.data; })];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.access_token];
            }
        });
    });
}
//# sourceMappingURL=okta-auth.js.map