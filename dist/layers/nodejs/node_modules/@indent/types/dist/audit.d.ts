export declare type Resource = {
    id?: string;
    kind?: string;
    email?: string;
    altIds?: string[];
    displayName?: string;
    labels?: ResourceLabels;
};
export declare type ResourceLabels = {
    [key: string]: string;
};
export declare type Event = {
    event: string;
    id?: string;
    actor?: Resource;
    reason?: string;
    timestamp?: string;
    sessionId?: string;
    externalId?: string;
    resources?: Resource[];
    meta?: Meta;
};
export declare type Meta = {
    name?: string;
    displayName?: string;
    labels?: MetaLabels;
    createTime?: string;
    updateTime?: string;
    deleteTime?: string;
    expireTime?: string;
    startTime?: string;
    endTime?: string;
};
export declare type MetaLabels = {
    [key: string]: string;
};
export declare type WriteRequest = {
    inputName: string;
    events: Event[];
};
export interface IAuditAPIOptions {
    dsn?: string;
    debug?: boolean;
    fetch?: (input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>;
}
export interface IWriteOptions {
    flushImmediately?: boolean;
}
export interface IAuditAPI {
    init: (options: IAuditAPIOptions) => void;
    write: (event: Event, options?: IWriteOptions) => void;
}
//# sourceMappingURL=audit.d.ts.map