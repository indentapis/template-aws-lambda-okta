{"version":3,"file":"sign.test.js","sourceRoot":"","sources":["../../src/signature/sign.test.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAA;AAE7B,IAAI,cAAc,GAAG;IACnB,MAAM,EAAE,MAAM;IACd,IAAI,EAAE,gDAAgD;IACtD,IAAI,EAAE,cAAc;IACpB,OAAO,EAAE;QACP,IAAI,EAAE,gDAAgD;QACtD,oBAAoB,EAAE,sBAAsB;KAC7C;IACD,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE;CACpC,CAAA;AAED,QAAQ,CAAC,MAAM,EAAE;IACf,IAAI,CAAC,OAAO,EAAE;QACZ,OAAA,MAAM,CACJ,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,gDAAgD;YACtD,IAAI,EAAE,cAAc;YACpB,OAAO,EAAE;gBACP,IAAI,EAAE,gDAAgD;gBACtD,oBAAoB,EAAE,sBAAsB;aAC7C;YACD,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE;SACpC,CAAC,CACH,CAAC,OAAO,CACP,kEAAkE,CACnE;IAbD,CAaC,CAAC,CAAA;IAEJ,IAAI,CAAC,+BAA+B,EAAE;QACpC,OAAA,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CACjD,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAChC;IAFD,CAEC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,MAAM,EAAE;IACf,IAAI,CAAC,mBAAmB,EAAE;QACxB,OAAA,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,OAAO,CAC7C,kEAAkE,CACnE;IAFD,CAEC,CAAC,CAAA;IAEJ,IAAI,CAAC,6BAA6B,EAAE;QAClC,OAAA,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CACjD,IAAI,CAAC,SAAS,wBAAO,cAAc,KAAE,SAAS,EAAE,sBAAsB,IAAG,CAC1E;IAFD,CAEC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import { sign } from './sign'\n\nlet exampleRequest = {\n  method: 'POST',\n  host: 'example123.execute-api.us-west-2.amazonaws.com',\n  path: '/webhook/dev',\n  headers: {\n    Host: 'example123.execute-api.us-west-2.amazonaws.com',\n    'X-Indent-Timestamp': '2020-05-02T06:10:30Z'\n  },\n  body: { events: [{ hello: true }] }\n}\n\ndescribe('sign', () => {\n  test('basic', () =>\n    expect(\n      sign('secret_123', {\n        method: 'POST',\n        host: 'example123.execute-api.us-west-2.amazonaws.com',\n        path: '/webhook/dev',\n        headers: {\n          Host: 'example123.execute-api.us-west-2.amazonaws.com',\n          'X-Indent-Timestamp': '2020-05-02T06:10:30Z'\n        },\n        body: { events: [{ hello: true }] }\n      })\n    ).toEqual(\n      '5776de99671e05ca680fe2f33ac311c496969fd782d01c43793a21ac7280b1de'\n    ))\n\n  test('different secrets should fail', () =>\n    expect(sign('secret1', exampleRequest)).not.toEqual(\n      sign('secret2', exampleRequest)\n    ))\n})\n\ndescribe('time', () => {\n  test('invalid timestamp', () =>\n    expect(sign('secret1', exampleRequest)).toEqual(\n      'bf112e8bb28cbadfe4ec87f9f6e8430859a6c9d78b95e0dc9c0b3a32a82b173a'\n    ))\n\n  test('different times should fail', () =>\n    expect(sign('secret1', exampleRequest)).not.toEqual(\n      sign('secret1', { ...exampleRequest, timestamp: '2020-05-02T06:10:31Z' })\n    ))\n})\n"]}