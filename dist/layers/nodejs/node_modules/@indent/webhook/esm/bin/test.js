import { __assign, __awaiter, __generator, __read } from "tslib";
import DEFAULT_CONFIG from '../config/default';
import { getSignaturePayload, sign } from '../index';
import fetch from 'node-fetch';
import path from 'path';
import arg from 'arg';
import fs from 'fs';
// indent-webhook-test
var args = arg({
    '-c': String,
    '--url': String,
    '--config': String,
    '--help': Boolean,
    '-h': Boolean
});
var showHelp = function () {
    return console.log("\nUsage: indent-webhook-test --url=[url] --config,-c=[config] <url>\n\n--url        <url>     URL to work with for testing\n--config, -c <config>  File path of test config, https://indent.fyi/indent-js/webhook-test-config\n".trim());
};
var _a = __read(args._, 1), _b = _a[0], url = _b === void 0 ? '' : _b;
if (!url) {
    url = args['--url'] || '';
}
if (args['--help'] || args['-h'] || url === 'help') {
    showHelp();
    process.exit(0);
}
var configPath = args['--config'] || args['-c'] || '';
var config = DEFAULT_CONFIG;
if (configPath) {
    try {
        config = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), configPath)).toString());
    }
    catch (_err) { }
}
if (!url) {
    showHelp();
    process.exit(1);
}
var hook = config.hook;
var timestamp = function () { return new Date().toISOString(); };
var sleep = function (d) { return new Promise(function (resolve) { return setTimeout(resolve, d); }); };
if (!hook) {
    console.error('Error: missing `hook` field in config, should be object like `{"hook":{"secret":"123"}}`');
    process.exit(1);
}
var complete = Promise.all(config.entries.map(function (cfg) { return __awaiter(void 0, void 0, void 0, function () {
    var body, ts, signature, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                body = JSON.stringify({
                    events: cfg.events
                });
                return [4 /*yield*/, sleep(cfg.delay || 0)];
            case 1:
                _a.sent();
                ts = timestamp();
                return [4 /*yield*/, sign({
                        secret: hook.secret,
                        payload: getSignaturePayload({
                            timestamp: ts,
                            body: body
                        })
                    })];
            case 2:
                signature = _a.sent();
                _a.label = 3;
            case 3:
                _a.trys.push([3, 5, , 6]);
                return [4 /*yield*/, fetch(hook.url || url, {
                        method: hook.method || 'post',
                        headers: __assign(__assign({}, hook.headers), { 'X-Indent-Timestamp': ts, 'X-Indent-Signature': signature }),
                        body: body
                    })];
            case 4:
                _a.sent();
                return [2 /*return*/, null];
            case 5:
                err_1 = _a.sent();
                throw err_1;
            case 6: return [2 /*return*/];
        }
    });
}); }));
complete
    .then(function () { return console.log('done!'); })
    .catch(function (err) {
    console.error(err);
});
//# sourceMappingURL=test.js.map