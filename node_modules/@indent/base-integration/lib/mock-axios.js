"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachMockInterceptors = exports.addMock = void 0;
var mocks = {};
function addMock(config, res) {
    mocks[getConfigKey(config)] = res;
    return mocks;
}
exports.addMock = addMock;
var getConfigKey = function (config) {
    return [(config.method || 'get').toLowerCase(), config.baseURL, config.url].join(':');
};
var isMocked = function (config) { return getConfigKey(config) in mocks; };
var getMockErrorWithResponse = function (config) {
    var mockError = new Error();
    mockError.mockData = mocks[getConfigKey(config)];
    mockError.config = config;
    return Promise.reject(mockError);
};
var isMockError = function (error) { return Boolean(error.mockData); };
var getMockResponse = function (mockError) {
    var mockData = mockError.mockData, config = mockError.config;
    // Handle mocked error (any non-2xx status code)
    if (mockData.status && String(mockData.status)[0] !== '2') {
        var err = new Error(mockData.message || 'mock error');
        err.code = mockData.status;
        return Promise.reject(err);
    }
    // Handle mocked success
    return Promise.resolve(Object.assign({
        data: {},
        status: 200,
        statusText: 'OK',
        headers: {},
        config: config,
        isMock: true,
    }, mockData));
};
function attachMockInterceptors(client) {
    client.interceptors.request.use(function (config) {
        var configKey = getConfigKey(config);
        if (isMocked(config)) {
            console.log('[REQ:MOCK] ' + configKey);
            return getMockErrorWithResponse(config);
        }
        console.log('[REQ] ' + getConfigKey(config));
        return config;
    }, function (error) { return Promise.reject(error); });
    client.interceptors.response.use(function (response) { return response; }, function (error) {
        if (isMockError(error)) {
            return getMockResponse(error);
        }
        return Promise.reject(error);
    });
}
exports.attachMockInterceptors = attachMockInterceptors;
//# sourceMappingURL=mock-axios.js.map