{"version":3,"file":"audit.js","sourceRoot":"","sources":["../src/audit.ts"],"names":[],"mappings":"","sourcesContent":["export type Resource = {\n  id?: string // The identifier for the resource\n  kind?: string // The kind of the resource\n  email?: string // The email address for the resource\n  altIds?: string[] // The alternate identifiers for the resource\n  displayName?: string // The display name for the resource\n  labels?: ResourceLabels // The labels for the Resource\n}\n\nexport type ResourceLabels = {\n  [key: string]: string\n}\n\nexport type Event = {\n  // Required\n  event: string\n\n  // Optional\n  id?: string\n  actor?: Resource\n  reason?: string\n  timestamp?: string\n  sessionId?: string\n  externalId?: string\n  resources?: Resource[]\n  meta?: Meta\n}\n\nexport type Meta = {\n  // Machine-readable name\n  name?: string\n  // Human-readable name\n  displayName?: string\n  // Index-able labels\n  labels?: MetaLabels\n  // Timestamps\n  createTime?: string\n  updateTime?: string\n  deleteTime?: string\n  expireTime?: string\n  startTime?: string\n  endTime?: string\n}\n\nexport type MetaLabels = {\n  [key: string]: string\n}\n\nexport type WriteRequest = {\n  inputName: string\n  events: Event[]\n}\n\nexport interface IAuditAPIOptions {\n  dsn?: string\n  debug?: boolean\n  fetch?: (\n    input: RequestInfo,\n    init?: RequestInit | undefined\n  ) => Promise<Response>\n}\n\nexport interface IWriteOptions {\n  flushImmediately?: boolean\n}\n\nexport interface IAuditAPI {\n  init: (options: IAuditAPIOptions) => void\n  write: (event: Event, options?: IWriteOptions) => void\n}\n"]}