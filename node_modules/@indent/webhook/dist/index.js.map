{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,0DAAqC;AAWrC,SAAsB,IAAI,CAAC,EAA6B;QAA3B,cAAW,EAAX,gCAAW,EAAE,eAAY,EAAZ,iCAAY;;;YACpD,sBAAO,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAA;;;CACvE;AAFD,oBAEC;AAED,SAAgB,mBAAmB,CAAC,IAGnC;IACO,IAAA,0BAAS,CAAS;IACxB,IAAI,UAAU,GAAG,EAAE,CAAA;IAEnB,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;QACjC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAA;KACvB;SAAM;QACL,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KACvC;IAED,OAAO,QAAM,SAAS,SAAI,UAAY,CAAA;AACxC,CAAC;AAdD,kDAcC;AAED,SAAsB,MAAM,CAAC,OAAsB;;;;;;oBACjD,IAAI,OAAO,CAAC,OAAO,EAAE;wBACf,EAAE,GACJ,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC;4BACrC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;wBACnC,GAAG,GACL,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC;4BACrC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;wBAEvC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,EAAE,CAAC,CAAA;wBAC9B,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;qBAChC;oBAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;wBACnB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAA;qBACrE;oBAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;wBACtB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAA;qBACxE;oBAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;wBACtB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAA;qBACxE;oBAED,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;wBACjB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAA;qBACnE;oBAEO,MAAM,GAA6C,OAAO,OAApD,EAAE,IAAI,GAAuC,OAAO,KAA9C,EAAE,SAAS,GAA4B,OAAO,UAAnC,EAAE,SAAS,GAAiB,OAAO,UAAxB,EAAE,UAAU,GAAK,OAAO,WAAZ,CAAY;oBAC5D,OAAO,GAAG,mBAAmB,CAAC,EAAE,IAAI,MAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAA;oBAC7B,qBAAM,IAAI,CAAC,EAAE,MAAM,QAAA,EAAE,OAAO,SAAA,EAAE,CAAC,EAAA;;oBAApD,kBAAkB,GAAG,SAA+B;oBACpD,gBAAgB,GAAG,kBAAkB,KAAK,SAAS,CAAA;oBAEzD,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,UAAU,EAAE;wBACnD,IAAI,CAAC,gBAAgB,EAAE;4BACrB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAA;yBAChE;qBACF;oBAED,sBAAO,gBAAgB,EAAA;;;;CACxB;AAzCD,wBAyCC;AAED,kBAAe,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAA","sourcesContent":["import * as CryptoJS from 'crypto-js'\n\nexport type VerifyOptions = {\n  secret: string\n  body: string | any\n  headers?: { [name: string]: string | string[] }\n  timestamp?: string\n  signature?: string\n  throwError?: boolean\n}\n\nexport async function sign({ secret = '', payload = '' }): Promise<string> {\n  return CryptoJS.HmacSHA256(payload, secret).toString(CryptoJS.enc.Hex)\n}\n\nexport function getSignaturePayload(opts: {\n  timestamp: string\n  body: string | any\n}) {\n  let { timestamp } = opts\n  let bodyString = ''\n\n  if (typeof opts.body === 'string') {\n    bodyString = opts.body\n  } else {\n    bodyString = JSON.stringify(opts.body)\n  }\n\n  return `v0:${timestamp}:${bodyString}`\n}\n\nexport async function verify(options: VerifyOptions): Promise<boolean> {\n  if (options.headers) {\n    let ts =\n      options.headers['X-Indent-Timestamp'] ||\n      options.headers['x-indent-timestamp']\n    let sig =\n      options.headers['X-Indent-Signature'] ||\n      options.headers['x-indent-signature']\n\n    options.timestamp = String(ts)\n    options.signature = String(sig)\n  }\n\n  if (!options.secret) {\n    throw new Error('@indent/webhook: verify(): missing options.secret')\n  }\n\n  if (!options.timestamp) {\n    throw new Error('@indent/webhook: verify(): missing options.timestamp')\n  }\n\n  if (!options.signature) {\n    throw new Error('@indent/webhook: verify(): missing options.signature')\n  }\n\n  if (!options.body) {\n    throw new Error('@indent/webhook: verify(): missing options.body')\n  }\n\n  const { secret, body, signature, timestamp, throwError } = options\n  const payload = getSignaturePayload({ body, timestamp })\n  const generatedSignature = await sign({ secret, payload })\n  const isValidSignature = generatedSignature === signature\n\n  if (typeof throwError === 'undefined' || throwError) {\n    if (!isValidSignature) {\n      throw new Error('@indent/webhook: verify(): invalid signature')\n    }\n  }\n\n  return isValidSignature\n}\n\nexport default { sign, verify }\n"]}