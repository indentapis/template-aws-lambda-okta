{"version":3,"file":"sign.js","sourceRoot":"","sources":["../../src/signature/sign.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHmac, createHash, HexBase64Latin1Encoding } from 'crypto'\nimport { parse as parseQuerystring, ParsedUrlQuery } from 'querystring'\n\nexport interface SignableRequest {\n  host: string\n  path: string\n  headers: { [key: string]: string }\n\n  method?: string\n  timestamp?: string\n  body?: string | any\n  signedHeaders?: { [key: string]: string }\n}\n\nexport interface SigningOptions {\n  date: Date\n  region: string\n  service: string\n}\n\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\n\nfunction hmac(key: string, str: string, encoding?: HexBase64Latin1Encoding) {\n  return createHmac('sha256', key)\n    .update(str, 'utf8')\n    .digest(encoding || 'hex')\n}\n\nfunction hash(string: string, encoding?: HexBase64Latin1Encoding) {\n  return createHash('sha256')\n    .update(string, 'utf8')\n    .digest(encoding || 'hex')\n}\n\nfunction encodeRfc3986(urlEncodedString: string): string {\n  return urlEncodedString.replace(/[!'()*]/g, (c: string) =>\n    [\n      '%',\n      c\n        .charCodeAt(0)\n        .toString(16)\n        .toUpperCase()\n    ].join('')\n  )\n}\n\nfunction encodeRfc3986Full(str: string): string {\n  return encodeRfc3986(encodeURIComponent(str))\n}\n\nfunction getCanonicalString(options: SigningOptions, request: SignableRequest) {\n  let path = request.path || '/'\n\n  // S3 doesn't always encode characters > 127 correctly and\n  // all services don't encode characters > 255 correctly\n  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n  if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {\n    path = encodeURI(decodeURI(path))\n  }\n\n  var queryIx = path.indexOf('?')\n  let query: ParsedUrlQuery\n\n  if (queryIx >= 0) {\n    query = parseQuerystring(path.slice(queryIx + 1))\n    path = path.slice(0, queryIx)\n  } else {\n    query = {}\n  }\n\n  let parsedPath = { query, path }\n  let pathStr = parsedPath.path\n  let headers = request.headers,\n    queryStr = '',\n    normalizePath = options.service !== 's3',\n    decodePath = options.service === 's3',\n    decodeSlashesInPath = options.service === 's3',\n    firstValOnly = options.service === 's3',\n    bodyHash\n\n  if (options.service === 's3') {\n    bodyHash = 'UNSIGNED-PAYLOAD'\n  } else {\n    bodyHash =\n      headers['X-Indent-Content-Sha256'] ||\n      headers['x-Indent-content-sha256'] ||\n      hash(request.body || '', 'hex')\n  }\n\n  if (query) {\n    let reducedQuery: { [key: string]: string[] | string } = Object.keys(\n      query\n    ).reduce(function(obj: { [key: string]: string | string[] }, key) {\n      if (!key) return obj\n      obj[encodeRfc3986Full(key)] = !Array.isArray(query[key])\n        ? query[key]\n        : firstValOnly\n        ? query[key][0]\n        : query[key]\n      return obj\n    }, {})\n    let encodedQueryPieces: string[] = []\n    Object.keys(reducedQuery)\n      .sort()\n      .forEach(function(key) {\n        if (Array.isArray(reducedQuery[key])) {\n          ;(reducedQuery[key] as string[])\n            .map(encodeRfc3986Full)\n            .sort()\n            .forEach(function(val: string) {\n              encodedQueryPieces.push(key + '=' + val)\n            })\n        } else {\n          encodedQueryPieces.push(\n            key + '=' + encodeRfc3986Full(reducedQuery[key] as string)\n          )\n        }\n      })\n    queryStr = encodedQueryPieces.join('&')\n  }\n  if (pathStr !== '/') {\n    if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, '/')\n    pathStr = pathStr\n      .split('/')\n      .reduce(function(path: string[], piece = '') {\n        if (normalizePath && piece === '..') {\n          path.pop()\n        } else if (!normalizePath || piece !== '.') {\n          if (decodePath) piece = decodeURIComponent(piece).replace(/\\+/g, ' ')\n          path.push(encodeRfc3986Full(piece))\n        }\n        return path\n      }, [])\n      .join('/')\n    if (pathStr[0] !== '/') pathStr = '/' + pathStr\n    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/')\n  }\n\n  return [\n    (request.method || 'POST').toUpperCase(),\n    pathStr,\n    queryStr,\n    canonicalHeaders(options, request) + '\\n',\n    signedHeaders(options, request),\n    bodyHash\n  ].join('\\n')\n}\n\nfunction canonicalHeaders(_options: SigningOptions, request: SignableRequest) {\n  let headers = request.headers\n\n  function trimAll(header: string | string[]) {\n    return header\n      .toString()\n      .trim()\n      .replace(/\\s+/g, ' ')\n  }\n\n  return Object.keys(headers)\n    .sort(function(a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1\n    })\n    .map(function(key) {\n      return key.toLowerCase() + ':' + trimAll(headers[key])\n    })\n    .join('\\n')\n}\n\nfunction signedHeaders(_options: SigningOptions, request: SignableRequest) {\n  return Object.keys(request.headers)\n    .map(function(key) {\n      return key.toLowerCase()\n    })\n    .sort()\n    .join(';')\n}\n\nfunction getSignatureKey(\n  key: string,\n  date: string,\n  region: string,\n  svc: string\n): string {\n  let kDate = hmac(date, 'IDV1' + key)\n  let kRegion = hmac(region, kDate)\n  let kService = hmac(svc, kRegion)\n  let kSigning = hmac('idv1_request', kService)\n  return kSigning\n}\n\nfunction timestampFromNow(): string {\n  return new Date().toISOString()\n}\n\nfunction getSigningAlg() {\n  return 'IDV1-HMAC-SHA256'\n}\n\nfunction getCredentialScope(options: SigningOptions) {\n  let { date, region, service } = options\n\n  return [\n    [date.getFullYear(), date.getMonth(), date.getDate()].join(''),\n    region,\n    service,\n    'idv1_request'\n  ].join('/')\n}\n\nfunction getStringToSign(options: SigningOptions, request: SignableRequest) {\n  return [\n    getSigningAlg(),\n    getSigningTime(options),\n    getCredentialScope(options),\n    hash(getCanonicalString(options, request), 'hex')\n  ].join('\\n')\n}\n\nfunction getSigningTime(options: SigningOptions): string {\n  if (!options.date || isNaN(options.date.getTime())) {\n    return ''\n  }\n\n  return options.date.toISOString().replace(/(\\-|:|\\.\\d*)/g, '')\n}\n\nexport function sign(secret: string, request: SignableRequest) {\n  if (request.body && typeof request.body !== 'string') {\n    request = { ...request, body: JSON.stringify(request.body) }\n  }\n\n  let datetime =\n    request.timestamp ||\n    request.headers['X-Indent-Timestamp'] ||\n    timestampFromNow()\n  let date = new Date(datetime)\n  let region = request.headers['X-Indent-Region'] || 'gcp:us-west2'\n  let service = request.headers['X-Indent-Service'] || 'indent.v1.alertapi'\n  let key = getSignatureKey(secret, datetime, region, service)\n  let options: SigningOptions = { date, region, service }\n  let stringToSign = getStringToSign(options, request)\n\n  return hmac(key, stringToSign, 'hex')\n}\n"]}