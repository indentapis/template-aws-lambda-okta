{"version":3,"file":"test.js","sourceRoot":"","sources":["../../src/bin/test.ts"],"names":[],"mappings":"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","sourcesContent":["import DEFAULT_CONFIG, {\n  WebhookTestConfig,\n  WebhookTestConfigEntry\n} from '../config/default'\nimport * as types from '@indent/types'\nimport { getSignaturePayload, sign } from '../index'\nimport fetch from 'node-fetch'\nimport path from 'path'\nimport arg from 'arg'\nimport fs from 'fs'\n\n// indent-webhook-test\nconst args = arg({\n  '-c': String,\n  '--url': String,\n  '--config': String,\n  '--help': Boolean,\n  '-h': Boolean\n})\n\nconst showHelp = () =>\n  console.log(\n    `\nUsage: indent-webhook-test --url=[url] --config,-c=[config] <url>\n\n--url        <url>     URL to work with for testing\n--config, -c <config>  File path of test config, https://indent.fyi/indent-js/webhook-test-config\n`.trim()\n  )\n\nlet [url = ''] = args._\n\nif (!url) {\n  url = args['--url'] || ''\n}\n\nif (args['--help'] || args['-h'] || url === 'help') {\n  showHelp()\n  process.exit(0)\n}\n\nlet configPath = args['--config'] || args['-c'] || ''\nlet config = DEFAULT_CONFIG\n\nif (configPath) {\n  try {\n    config = JSON.parse(\n      fs.readFileSync(path.resolve(process.cwd(), configPath)).toString()\n    ) as WebhookTestConfig\n  } catch (_err) {}\n}\n\nif (!url) {\n  showHelp()\n\n  process.exit(1)\n}\n\nlet hook = config.hook\nlet timestamp = () => new Date().toISOString()\nlet sleep = (d: number) => new Promise(resolve => setTimeout(resolve, d))\n\nif (!hook) {\n  console.error(\n    'Error: missing `hook` field in config, should be object like `{\"hook\":{\"secret\":\"123\"}}`'\n  )\n  process.exit(1)\n}\n\nlet complete = Promise.all(\n  config.entries.map(async (cfg: WebhookTestConfigEntry) => {\n    let body = JSON.stringify({\n      events: cfg.events as types.Event[]\n    })\n\n    await sleep(cfg.delay || 0)\n\n    let ts = timestamp()\n    let signature = await sign({\n      secret: hook.secret,\n      payload: getSignaturePayload({\n        timestamp: ts,\n        body\n      })\n    })\n\n    try {\n      await fetch(hook.url || url, {\n        method: hook.method || 'post',\n        headers: {\n          ...hook.headers,\n          'X-Indent-Timestamp': ts,\n          'X-Indent-Signature': signature\n        },\n        body\n      })\n\n      return null\n    } catch (err) {\n      throw err\n    }\n  })\n)\n\ncomplete\n  .then(() => console.log('done!'))\n  .catch(err => {\n    console.error(err)\n  })\n"]}